name: Build and Release NinjaMagisk Windows Tools

on:
  push:
    tags:
      - 'v*.*.*' # e.g., v1.0.0
  workflow_dispatch: # Manual trigger

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Set up MSBuild
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      # Set up NuGet
      - name: Setup NuGet
        uses: nuget/setup-nuget@v2

      # Restore NuGet packages
      - name: Restore NuGet Packages
        run: nuget restore "NinjaMagisk Windows Tools.sln"

      # Copy NinjaMagisk.Interface.dll to the expected build directory
      - name: Copy DLL to Build Directory
        shell: pwsh
        run: |
          $sourceDll = "lib/NinjaMagisk.Interface.dll"
          $targetDir = "NinjaMagisk Windows Tools/bin/Release"
          if (-Not (Test-Path $sourceDll)) {
            Write-Error "NinjaMagisk.Interface.dll not found in lib/ folder!"
            exit 1
          }
          New-Item -ItemType Directory -Path $targetDir -Force
          Copy-Item -Path $sourceDll -Destination $targetDir -Force
          Write-Output "Copied $sourceDll to $targetDir"

      # Build the solution with MSBuild (disable manifest signing)
      - name: Build Release
        run: msbuild "NinjaMagisk Windows Tools.sln" -t:Build -p:Configuration=Release -p:SignManifests=false -v:normal

      # Verify build output
      - name: Check Build Output
        shell: pwsh
        run: |
          $exePath = "NinjaMagisk Windows Tools/bin/Release/NinjaMagisk Windows Tools.exe"
          if (-Not (Test-Path $exePath)) {
            Write-Error "Build output not found at $exePath!"
            exit 1
          }

      # Package the output into a zip
      - name: Package Release
        shell: pwsh
        run: |
          cd "NinjaMagisk Windows Tools/bin/Release"
          Compress-Archive -Path * -DestinationPath "../../../NinjaMagisk-Windows-Tools-${{ github.ref_name }}.zip"

      # Create a GitHub Release (on tag push)
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v')
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: NinjaMagisk Windows Tools ${{ github.ref_name }}
          body: |
            Automated release for ${{ github.ref_name }}.
            Built on ${{ github.sha }}.
          draft: false
          prerelease: false

      # Upload the zip to the release (on tag push)
      - name: Upload Release Asset
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: NinjaMagisk-Windows-Tools-${{ github.ref_name }}.zip
          asset_name: NinjaMagisk-Windows-Tools-${{ github.ref_name }}.zip
          asset_content_type: application/zip

      # Upload artifact for manual runs
      - name: Upload Build Artifact
        if: github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          name: NinjaMagisk-Windows-Tools-${{ github.sha }}
          path: NinjaMagisk-Windows-Tools-${{ github.ref_name }}.zip

name: Build and Release NinjaMagisk Windows Tools

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Set up .NET SDK
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.0.x'

      # Install Roslyn-based syntax fixer (via a custom script)
      - name: Install dependencies
        run: |
          dotnet new console -n SyntaxFixer -f net6.0
          cd SyntaxFixer
          dotnet add package Microsoft.CodeAnalysis.CSharp.Workspaces --version 4.8.0
          dotnet restore

      # Add a script to fix syntax errors
      - name: Create syntax fixer script
        shell: pwsh
        run: |
          $script = @"
          using Microsoft.CodeAnalysis;
          using Microsoft.CodeAnalysis.CSharp;
          using Microsoft.CodeAnalysis.CSharp.Syntax;
          using Microsoft.CodeAnalysis.Text;
          using System;
          using System.IO;
          using System.Linq;

          class Program
          {
              static void Main(string[] args)
              {
                  var filePath = args[0];
                  var text = File.ReadAllText(filePath);
                  var tree = CSharpSyntaxTree.ParseText(text);
                  var root = tree.GetRoot();

                  // Fix missing semicolons
                  var fixedRoot = root.ReplaceNodes(
                      root.DescendantNodes().OfType<ExpressionStatementSyntax>(),
                      (node, _) => node.SemicolonToken.IsMissing ? node.WithSemicolonToken(SyntaxFactory.Token(SyntaxKind.SemicolonToken)) : node
                  );

                  // Fix missing commas in lists (e.g., AddRange)
                  fixedRoot = fixedRoot.ReplaceNodes(
                      root.DescendantNodes().OfType<InitializerExpressionSyntax>(),
                      (node, _) =>
                      {
                          var separators = node.Expressions.GetSeparators();
                          if (separators.Any(s => s.IsMissing))
                          {
                              return node.WithExpressions(
                                  SyntaxFactory.SeparatedList(
                                      node.Expressions,
                                      node.Expressions.GetSeparators().Select(s => s.IsMissing ? SyntaxFactory.Token(SyntaxKind.CommaToken) : s)
                                  )
                              );
                          }
                          return node;
                      }
                  );

                  File.WriteAllText(filePath, fixedRoot.ToFullString());
                  Console.WriteLine($""Fixed syntax in {filePath}"");
              }
          }
          "@
          Set-Content -Path "SyntaxFixer/Program.cs" -Value $script

      # Run the syntax fixer on Form1.cs and Form1.Designer.cs
      - name: Fix syntax errors
        shell: pwsh
        run: |
          cd SyntaxFixer
          dotnet build -c Release
          $files = @("..\NinjaMagisk Windows Tools\Form1.cs", "..\NinjaMagisk Windows Tools\Form1.Designer.cs")
          foreach ($file in $files) {
              if (Test-Path $file) {
                  dotnet run --project . $file
              }
          }
          cd ..
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git add "NinjaMagisk Windows Tools/Form1.cs" "NinjaMagisk Windows Tools/Form1.Designer.cs"
          git commit -m "Auto-correct syntax errors in Form1.cs and Form1.Designer.cs" || echo "No changes to commit"
          git push || echo "No push needed"

      # Set up MSBuild
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      # Set up NuGet
      - name: Setup NuGet
        uses: nuget/setup-nuget@v2

      # Restore NuGet packages
      - name: Restore NuGet Packages
        run: nuget restore "NinjaMagisk Windows Tools.sln"

      # Copy NinjaMagisk.Interface.dll
      - name: Copy DLL to Build Directory
        shell: pwsh
        run: |
          $sourceDll = "lib/NinjaMagisk.Interface.dll"
          $targetDir = "NinjaMagisk Windows Tools/bin/Release"
          if (-Not (Test-Path $sourceDll)) {
            Write-Error "NinjaMagisk.Interface.dll not found in lib/ folder!"
            exit 1
          }
          New-Item -ItemType Directory -Path $targetDir -Force
          Copy-Item -Path $sourceDll -Destination $targetDir -Force

      # Build the solution
      - name: Build Release
        run: msbuild "NinjaMagisk Windows Tools.sln" -t:Build -p:Configuration=Release -p:SignManifests=false -v:normal

      # Verify build output
      - name: Check Build Output
        shell: pwsh
        run: |
          $exePath = "NinjaMagisk Windows Tools/bin/Release/NinjaMagisk Windows Tools.exe"
          if (-Not (Test-Path $exePath)) {
            Write-Error "Build output not found at $exePath!"
            exit 1
          }

      # Package the output
      - name: Package Release
        shell: pwsh
        run: |
          cd "NinjaMagisk Windows Tools/bin/Release"
          Compress-Archive -Path * -DestinationPath "../../../NinjaMagisk-Windows-Tools-${{ github.ref_name }}.zip"

      # Create a GitHub Release (on tag push)
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v')
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: NinjaMagisk Windows Tools ${{ github.ref_name }}
          body: |
            Automated release for ${{ github.ref_name }}.
            Built on ${{ github.sha }}.
          draft: false
          prerelease: false

      # Upload the zip to the release
      - name: Upload Release Asset
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: NinjaMagisk-Windows-Tools-${{ github.ref_name }}.zip
          asset_name: NinjaMagisk-Windows-Tools-${{ github.ref_name }}.zip
          asset_content_type: application/zip

      # Upload artifact for manual runs
      - name: Upload Build Artifact
        if: github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          name: NinjaMagisk-Windows-Tools-${{ github.sha }}
          path: NinjaMagisk-Windows-Tools-${{ github.ref_name }}.zip
